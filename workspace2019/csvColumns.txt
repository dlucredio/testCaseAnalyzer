1. 'mainProjectName', # Main project name (GitHub project)
2. 'projectName', # Eclipse project name (subproject/module in GitHub)
3. 'filePath', # The path to the file containing the test case
4. 'typeName', # The fully qualified name of the type that declares the test case
5. 'methodName', # The name of the test case (method name)
6. 'methodShortSignature', # Method (test case) short signature as internally represented in the JVM
7. 'methodVerboseSignature', # Method (test case) signature as represented in the source code
8. 'methodAnnotations', # Method (test case) annotations
9. 'numberOfFirstLevelStatements', # Number of statements in the method's body (only first level statements. Nested statements are not counted)
10. 'numberOfStatements', # Total number of statements. The entire body AST is traversed and all statements are counted
11. 'numberOfMethodInvocations', # Number of statements that are method invocations (complete AST)
12. 'distinctMethodInvocations', # List of distinct method invocations (complete AST)
13. 'numberOfDistinctMethodInvocations', # Number of distinct method invocations (complete AST)
14. 'numberOfMethodInvocationsWithExceptions', # Number of statements that are method invocations with exceptions being thrown (complete AST)
15. 'numberOfExceptionsThrown', # Number of exceptions thrown in method invocations
16. 'numberOfExceptionsThrownAndCaughtExact', # Number of exceptions thrown in method invocations and specifically caught (there is a "throw X" and a corresponding "catch X")
17. 'numberOfExceptionsThrownAndCaughtPartial', # // Number of exceptions thrown in method invocations and specifically caught but not an exact match (there is a "throw X" and a "catch Y" where Y may be X or a supertype of X)
18. 'exceptionsThrownInMethodInvocations', # List of exceptions thrown in all method invocations (complete AST)
19. 'numberOfAssertions', # Number of JUnit assertions, without going inside method invocations
20. 'numberOfAssertionsWithRecursion', # Number of JUnit assertions, recursively going inside method invocations up to 5 recursion levels
21. 'hasCommitData', # Whether this test case has commit data gathered by NICAD
22. 'mainProjectName2',  # Main project name (GitHub project) - repeated from mainProjectName for matching
23. 'methodName2', # Aggregated list of test cases for each project which has code clone or edited at some time - repeated from methodName for matching
24. 'noBugFixes', # The number of changes to that test case which considered a bug fix
25. 'noCommitFixes', # The number of commits changes that test case and classified as a bug fix
26. 'noClones' # The number of code clones detected by Nicad5 Tool    