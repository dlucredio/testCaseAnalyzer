locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
newdf = data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue)
result <- rbind(result, newdf)
# projects <- unique(staticAnalysisCommitsClones$mainProjectName)
# for (p in projects) {
#   print(sprintf("Testing H1 for project %s",p))
#   h1 = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
#   if (!is.null(h1)) {
#     result <- rbind(result, data.frame(project=p, obs=nrow(staticAnalysisCommitsClones), normalLeft=h1$normalLeft, normalRight=h1$normalRight, tau=h1$estimate, pValue=h1$pValue))
#   }
# }
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
debugSource('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
newdf = data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue)
result <- rbind(result, newdf)
# projects <- unique(staticAnalysisCommitsClones$mainProjectName)
# for (p in projects) {
#   print(sprintf("Testing H1 for project %s",p))
#   h1 = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
#   if (!is.null(h1)) {
#     result <- rbind(result, data.frame(project=p, obs=nrow(staticAnalysisCommitsClones), normalLeft=h1$normalLeft, normalRight=h1$normalRight, tau=h1$estimate, pValue=h1$pValue))
#   }
# }
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
newdf = data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue)
result <- rbind(result, newdf)
# projects <- unique(staticAnalysisCommitsClones$mainProjectName)
# for (p in projects) {
#   print(sprintf("Testing H1 for project %s",p))
#   h1 = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
#   if (!is.null(h1)) {
#     result <- rbind(result, data.frame(project=p, obs=nrow(staticAnalysisCommitsClones), normalLeft=h1$normalLeft, normalRight=h1$normalRight, tau=h1$estimate, pValue=h1$pValue))
#   }
# }
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
debugSource('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
debugSource('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
newdf = data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue)
result <- rbind(result, newdf)
# projects <- unique(staticAnalysisCommitsClones$mainProjectName)
# for (p in projects) {
#   print(sprintf("Testing H1 for project %s",p))
#   h1 = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
#   if (!is.null(h1)) {
#     result <- rbind(result, data.frame(project=p, obs=nrow(staticAnalysisCommitsClones), normalLeft=h1$normalLeft, normalRight=h1$normalRight, tau=h1$estimate, pValue=h1$pValue))
#   }
# }
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
newdf = data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue)
result <- rbind(result, newdf)
# projects <- unique(staticAnalysisCommitsClones$mainProjectName)
# for (p in projects) {
#   print(sprintf("Testing H1 for project %s",p))
#   h1 = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
#   if (!is.null(h1)) {
#     result <- rbind(result, data.frame(project=p, obs=nrow(staticAnalysisCommitsClones), normalLeft=h1$normalLeft, normalRight=h1$normalRight, tau=h1$estimate, pValue=h1$pValue))
#   }
# }
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
newdf = data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue)
result <- rbind(result, newdf)
# projects <- unique(staticAnalysisCommitsClones$mainProjectName)
# for (p in projects) {
#   print(sprintf("Testing H1 for project %s",p))
#   h1 = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
#   if (!is.null(h1)) {
#     result <- rbind(result, data.frame(project=p, obs=nrow(staticAnalysisCommitsClones), normalLeft=h1$normalLeft, normalRight=h1$normalRight, tau=h1$estimate, pValue=h1$pValue))
#   }
# }
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
View(result)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
newdf = data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue)
result <- rbind(result, newdf)
# projects <- unique(staticAnalysisCommitsClones$mainProjectName)
# for (p in projects) {
#   print(sprintf("Testing H1 for project %s",p))
#   h1 = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
#   if (!is.null(h1)) {
#     result <- rbind(result, data.frame(project=p, obs=nrow(staticAnalysisCommitsClones), normalLeft=h1$normalLeft, normalRight=h1$normalRight, tau=h1$estimate, pValue=h1$pValue))
#   }
# }
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
View(result)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
result <- rbind(result, data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue))
projects <- unique(staticAnalysisCommitsClones$mainProjectName)
for (p in projects) {
print(sprintf("Testing H1 for project %s",p))
h = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
result <- rbind(result, data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue))
}
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
# Set working directory
setwd("~/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
# Load files
staticAnalysisCommitsClones <- read.csv(file='files/staticAnalysisCommitsClones.csv', stringsAsFactors = FALSE)
staticAnalysisCommitsClonesCoverage <- read.csv(file='files/staticAnalysisCommitsClonesCoverage.csv', stringsAsFactors = FALSE)
locComplexityEntropyCommitsClones <- read.csv(file='files/locComplexityEntropyCommitsClones.csv', stringsAsFactors = FALSE)
# Let's separate only the data with commit data available
staticAnalysisCommitsClones <- staticAnalysisCommitsClones[staticAnalysisCommitsClones$hasCommitData == "yes", ]
# Let's calculate additional columns needed for the hypotheses and convert data types
# For all hypotheses, we need noCommitFixes
staticAnalysisCommitsClones$noCommitFixes = as.numeric(staticAnalysisCommitsClones$noCommitFixes)
staticAnalysisCommitsClonesCoverage$noCommitFixes = as.numeric(staticAnalysisCommitsClonesCoverage$noCommitFixes)
locComplexityEntropyCommitsClones$noCommitFixes = as.numeric(locComplexityEntropyCommitsClones$noCommitFixes)
# For H1, we need to sum assertions with expected exceptions
staticAnalysisCommitsClones$numberOfAssertionsWithRecursion = as.numeric(staticAnalysisCommitsClones$numberOfAssertionsWithRecursion)
staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions = as.numeric(staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions)
staticAnalysisCommitsClones$finalNumberOfAssertions = staticAnalysisCommitsClones$numberOfAssertionsWithRecursion + staticAnalysisCommitsClones$numberOfDistinctExpectedExceptions
result <- data.frame()
# First, for all projects together
print("Testing H1 for all projects")
h = testH1(staticAnalysisCommitsClones)
result <- rbind(result, data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue))
projects <- unique(staticAnalysisCommitsClones$mainProjectName)
for (p in projects) {
print(sprintf("Testing H1 for project %s",p))
h = testH1(staticAnalysisCommitsClones[staticAnalysisCommitsClones$mainProjectName == p,])
result <- rbind(result, data.frame(
project="all",
obs=nrow(staticAnalysisCommitsClones),
normalityLeft=h$normalityLeft,
normalityRight=h$normalityRight,
kendallTau=h$kendallTau,
kendallPValue=h$kendallPValue,
spearmanRho=h$spearmanRho,
spearmanPValue=h$spearmanPValue,
pearsonCor=h$pearsonCor,
pearsonPValue=h$pearsonPValue))
}
write.csv(result,"files/analysisResult.csv", row.names = TRUE)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(result)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(result)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h1.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(result)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2a.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2a.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(resulth1)
View(resulth2a)
View(resulth1)
View(resulth2a)
View(resulth1)
View(resulth2a)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2b.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2b.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2b.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(resulth2b)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2c.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2c.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2c.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(resulth2c)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(resulth3a)
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/h2c.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
source('~/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r')
View(resulth3d)
