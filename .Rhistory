ggplot(dataset,aes(noCommitFixes,noCommitFixes,label=..count..))+geom_bar(stat="identity",width=1)
ggplot(dataset,aes(noCommitFixes,noCommitFixes,label=..count..))+geom_bar(stat="identity",width=1)
library(ggplot2)
library(effsize)
library(Hmisc)
# Set working directory
setwd("C:\\Users\\dlucr\\GitProjects\\testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
debugSource("scripts/statisticAnalysis/h2a.r")
debugSource("scripts/statisticAnalysis/h2b.r")
debugSource("scripts/statisticAnalysis/h2c.r")
debugSource("scripts/statisticAnalysis/h3a.r")
debugSource("scripts/statisticAnalysis/h3b.r")
debugSource("scripts/statisticAnalysis/h3c.r")
debugSource("scripts/statisticAnalysis/h3d.r")
debugSource("scripts/statisticAnalysis/h6.r")
debugSource("scripts/statisticAnalysis/h7.r")
debugSource("scripts/statisticAnalysis/h10.r")
debugSource("scripts/statisticAnalysis/h14.r")
debugSource("scripts/statisticAnalysis/h18.r")
# Load file
dataset <- read.csv(file='files/mergedFinal.csv', stringsAsFactors = FALSE)
# For all hypotheses, we need noCommitFixes, let's convert them to numeric
dataset$noCommitFixes = as.numeric(dataset$noCommitFixes)
# Let's separate only the data with all data available
dataset <- dataset[dataset$hasCommitData == "yes", ]
dataset <- dataset[dataset$hasLocComplexityEntropy == "yes", ]
# For H1, we need to sum assertions with expected exceptions
dataset$numberOfAssertionsWithRecursion = as.numeric(dataset$numberOfAssertionsWithRecursion)
dataset$numberOfDistinctExpectedExceptions = as.numeric(dataset$numberOfDistinctExpectedExceptions)
dataset$finalNumberOfAssertions = dataset$numberOfAssertionsWithRecursion + dataset$numberOfDistinctExpectedExceptions
# For H2a, we need the number of distinct method invocations
dataset$numberOfDistinctMethodInvocations = as.numeric(dataset$numberOfDistinctMethodInvocations)
# For H2b, we need the number of distinct method invocations in the same class
dataset$numberOfDistinctMethodInvocationsInSameClass = as.numeric(dataset$numberOfDistinctMethodInvocationsInSameClass)
# For H2c, we need the number of distinct test case invocations in the same class
dataset$numberOfDistinctTestCaseMethodInvocationsInSameClass = as.numeric(dataset$numberOfDistinctTestCaseMethodInvocationsInSameClass)
# For H3a, we need the number of exceptions being thrown in a test case
dataset$numberOfExceptionsThrown = as.numeric(dataset$numberOfExceptionsThrown)
# For H3c abd H3d, we need the number of exceptions being expected or caught in a test case
dataset$numberOfExceptionsThrownAndCaughtPartial = as.numeric(dataset$numberOfExceptionsThrownAndCaughtPartial)
dataset$numberOfExceptionsThrownAndCaughtExact = as.numeric(dataset$numberOfExceptionsThrownAndCaughtExact)
dataset$numberOfDistinctExpectedExceptions = as.numeric(dataset$numberOfDistinctExpectedExceptions)
dataset$totalExceptions = dataset$numberOfExceptionsThrownAndCaughtPartial + dataset$numberOfExceptionsThrownAndCaughtExact + dataset$numberOfDistinctExpectedExceptions
# For H6, we need the number of LOC
dataset$CountLineCode = as.numeric(dataset$CountLineCode)
# For H7 and H10, we need the cyclomatic complexity
dataset$Cyclomatic = as.numeric(dataset$Cyclomatic)
# For H14, we need the coverage
dataset$LINE_covered = as.numeric(dataset$LINE_covered)
# For H18, we need readability, which is measured based on entropy
dataset$halsteadVolume = as.numeric(dataset$halsteadVolume)
dataset$CountLineCode = as.numeric(dataset$CountLineCode)
dataset$entropy = as.numeric(dataset$entropy)
dataset$readability = 8.87 - 0.033 * dataset$halsteadVolume + 0.4 * dataset$CountLineCode - 1.5 * dataset$entropy
ggplot(dataset,aes(noCommitFixes,noCommitFixes,label=..count..))+geom_bar(stat="identity",width=1)
ggplot(dataset,aes(noCommitFixes)) +geom_histogram()
describe(dataset$noCommitFixes)
table(dataset$noCommitFixes)
table(dataset$noCommitFixes)
plot(table(dataset$noCommitFixes))
plot(table(dataset$noCommitFixes), main = "Barplot")
plot(table(dataset$noCommitFixes), main = "Barplot", xlab = "Number of bug-fixing commits", ylab = "Test cases")
minor.tick(nx = 3, ny = 3, tick.ratio = 0.5)
minor.tick(nx = 3, ny = 3, tick.ratio = 1)
plot(table(dataset$noCommitFixes), main = "Barplot", xlab = "Number of bug-fixing commits", ylab = "Test cases")
minor.tick(nx = 3, ny = 3, tick.ratio = 1)
plot(table(dataset$noCommitFixes), main = "Barplot", xlab = "Number of bug-fixing commits", ylab = "Test cases")
minor.tick(nx = 1, ny = 1, tick.ratio = 1)
plot(table(dataset$noCommitFixes), main = "Barplot", xlab = "Number of bug-fixing commits", ylab = "Test cases")
minor.tick(nx = 37, ny = 1, tick.ratio = 1)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
tck = 0.02)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
tck = 0.32)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
tck = 0.1)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases")
barplot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases")
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases")
ggplot(dataset, aes(noCommitFixes)) +    # ggplot2 plot with modified x-axis labels
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, size = 5))
ggplot(dataset, aes(noCommitFixes, noCommitfixes)) +    # ggplot2 plot with modified x-axis labels
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, size = 5))
ggplot(dataset, aes(noCommitFixes, noCommitFixes)) +    # ggplot2 plot with modified x-axis labels
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, size = 5))
ggplot(table(dataset$noCommitFixes)) +    # ggplot2 plot with modified x-axis labels
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, size = 5))
ggplot(table(dataset$noCommitFixes))
plot(table(dataset$noCommitFixes))
p
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
xaxt = "n")
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
xaxt = "n")
axis(side=1,
at=table(dataset$noCommitFixes),
labels=labs[table(dataset$noCommitFixes)],
cex.axis=0.35)
axis(side=1,
at=table(dataset$noCommitFixes),
cex.axis=0.35)
table(dataset$noCommitFixes)
write.csv(table(dataset$noCommitFixes),"./files/dataset.csv")
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
xaxt = "n")
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2)
barplot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2,
width=4)
barplot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2,
width=4)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2,lwd=2.0)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2,lwd=2.0)
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2,lwd=2.0,type="1")
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2,lwd=2.0,type="2")
plot(table(dataset$noCommitFixes),
main = "Barplot",
xlab = "Number of bug-fixing commits",
ylab = "Test cases",
las=2)
dataIneffective <- dataset[dataset$noCommitFixes <=0,]
dataEffective <- dataset[dataset$noCommitFixes >5,]
nrow(dataIneffective)-nrow(dataEffective)
dataIneffective <- dataset[dataset$noCommitFixes <=0,]
dataEffective <- dataset[dataset$noCommitFixes >5,]
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
datasetCoverage <- dataset[dataset$hasCoverageData="yes",]
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataSimple <- dataset[dataset$Cyclomatic <=1,]
dataComplex <- dataset[dataset$Cyclomatic >1,]
nrow(dataSimple)-nrow(dataComplex)
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- dataset[dataset$noCommitFixes <= 0]
dataCoverageEffective <- dataset[dataset$noCommitFixes > 5]
nrow(dataCoverageIneffective)-nrow(dataCoverageEffective)
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- dataset[dataset$noCommitFixes <= 0]
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- datasetCoverage[datasetCoverage$noCommitFixes <= 0]
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
View(datasetCoverage)
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- datasetCoverage[datasetCoverage$noCommitFixes <= 0]
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- datasetCoverage[datasetCoverage$noCommitFixes <= 0,]
dataCoverageEffective <- datasetCoverage[datasetCoverage$noCommitFixes > 5,]
nrow(dataCoverageIneffective)-nrow(dataCoverageEffective)
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- datasetCoverage[datasetCoverage$noCommitFixes <= 0,]
dataCoverageEffective <- datasetCoverage[datasetCoverage$noCommitFixes > 6,]
nrow(dataCoverageIneffective)-nrow(dataCoverageEffective)
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- datasetCoverage[datasetCoverage$noCommitFixes <= 0,]
dataCoverageEffective <- datasetCoverage[datasetCoverage$noCommitFixes > 4,]
nrow(dataCoverageIneffective)-nrow(dataCoverageEffective)
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- datasetCoverage[datasetCoverage$noCommitFixes <= 0,]
dataCoverageEffective <- datasetCoverage[datasetCoverage$noCommitFixes > 5,]
nrow(dataCoverageIneffective)-nrow(dataCoverageEffective)
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
library(ggplot2)
library(effsize)
library(Hmisc)
# Set working directory
setwd("C:\\Users\\dlucr\\GitProjects\\testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/h1.r")
debugSource("scripts/statisticAnalysis/h2a.r")
debugSource("scripts/statisticAnalysis/h2b.r")
debugSource("scripts/statisticAnalysis/h2c.r")
debugSource("scripts/statisticAnalysis/h3a.r")
debugSource("scripts/statisticAnalysis/h3b.r")
debugSource("scripts/statisticAnalysis/h3c.r")
debugSource("scripts/statisticAnalysis/h3d.r")
debugSource("scripts/statisticAnalysis/h6.r")
debugSource("scripts/statisticAnalysis/h7.r")
debugSource("scripts/statisticAnalysis/h10.r")
debugSource("scripts/statisticAnalysis/h14.r")
debugSource("scripts/statisticAnalysis/h18.r")
# Load file
dataset <- read.csv(file='files/mergedFinal.csv', stringsAsFactors = FALSE)
# For all hypotheses, we need noCommitFixes, let's convert them to numeric
dataset$noCommitFixes = as.numeric(dataset$noCommitFixes)
# Let's separate only the data with all data available
dataset <- dataset[dataset$hasCommitData == "yes", ]
dataset <- dataset[dataset$hasLocComplexityEntropy == "yes", ]
# For H1, we need to sum assertions with expected exceptions
dataset$numberOfAssertionsWithRecursion = as.numeric(dataset$numberOfAssertionsWithRecursion)
dataset$numberOfDistinctExpectedExceptions = as.numeric(dataset$numberOfDistinctExpectedExceptions)
dataset$finalNumberOfAssertions = dataset$numberOfAssertionsWithRecursion + dataset$numberOfDistinctExpectedExceptions
# For H2a, we need the number of distinct method invocations
dataset$numberOfDistinctMethodInvocations = as.numeric(dataset$numberOfDistinctMethodInvocations)
# For H2b, we need the number of distinct method invocations in the same class
dataset$numberOfDistinctMethodInvocationsInSameClass = as.numeric(dataset$numberOfDistinctMethodInvocationsInSameClass)
# For H2c, we need the number of distinct test case invocations in the same class
dataset$numberOfDistinctTestCaseMethodInvocationsInSameClass = as.numeric(dataset$numberOfDistinctTestCaseMethodInvocationsInSameClass)
# For H3a, we need the number of exceptions being thrown in a test case
dataset$numberOfExceptionsThrown = as.numeric(dataset$numberOfExceptionsThrown)
# For H3c abd H3d, we need the number of exceptions being expected or caught in a test case
dataset$numberOfExceptionsThrownAndCaughtPartial = as.numeric(dataset$numberOfExceptionsThrownAndCaughtPartial)
dataset$numberOfExceptionsThrownAndCaughtExact = as.numeric(dataset$numberOfExceptionsThrownAndCaughtExact)
dataset$numberOfDistinctExpectedExceptions = as.numeric(dataset$numberOfDistinctExpectedExceptions)
dataset$totalExceptions = dataset$numberOfExceptionsThrownAndCaughtPartial + dataset$numberOfExceptionsThrownAndCaughtExact + dataset$numberOfDistinctExpectedExceptions
# For H6, we need the number of LOC
dataset$CountLineCode = as.numeric(dataset$CountLineCode)
# For H7 and H10, we need the cyclomatic complexity
dataset$Cyclomatic = as.numeric(dataset$Cyclomatic)
# For H14, we need the coverage
dataset$LINE_covered = as.numeric(dataset$LINE_covered)
# For H18, we need readability, which is measured based on entropy
dataset$halsteadVolume = as.numeric(dataset$halsteadVolume)
dataset$CountLineCode = as.numeric(dataset$CountLineCode)
dataset$entropy = as.numeric(dataset$entropy)
dataset$readability = 8.87 - 0.033 * dataset$halsteadVolume + 0.4 * dataset$CountLineCode - 1.5 * dataset$entropy
write.csv(table(dataset$noCommitFixes),"./files/dataset.csv")
dataIneffective <- dataset[dataset$noCommitFixes <=0,]
dataEffective <- dataset[dataset$noCommitFixes >5,]
nrow(dataIneffective)-nrow(dataEffective)
dataSimple <- dataset[dataset$Cyclomatic <=1,]
dataComplex <- dataset[dataset$Cyclomatic >1,]
nrow(dataSimple)-nrow(dataComplex)
datasetCoverage <- dataset[dataset$hasCoverageData=="yes",]
dataCoverageIneffective <- datasetCoverage[datasetCoverage$noCommitFixes <= 0,]
dataCoverageEffective <- datasetCoverage[datasetCoverage$noCommitFixes > 5,]
nrow(dataCoverageIneffective)-nrow(dataCoverageEffective)
result$numObservationsIneffective = nrow(dataIneffective)
result$numObservationsEffective = nrow(dataEffective)
result$balancing = nrow(dataIneffective)-nrow(dataEffective)
# Initializing the result data frame
results <- data.frame()
print("Testing H1 for all projects")
results <- rbind(results, testH1(dataEffective, dataIneffective))
print("Testing H2a for all projects")
results <- rbind(results, testH2a(dataEffective, dataIneffective))
print("Testing H2b for all projects")
results <- rbind(results, testH2b(dataEffective, dataIneffective))
print("Testing H2c for all projects")
results <- rbind(results, testH2c(dataEffective, dataIneffective))
print("Testing H3a for all projects")
results <- rbind(results, testH3a(dataEffective, dataIneffective))
print("Testing H3b for all projects")
results <- rbind(results, testH3b(dataEffective, dataIneffective))
print("Testing H3c for all projects")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
View(datasetCoverage)
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
