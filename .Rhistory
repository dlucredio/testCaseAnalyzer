source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
# Set working directory
setwd("/Users/dlucr/GitProjects/testCaseAnalyzer")
# Load other scripts
debugSource("scripts/statisticAnalysis/gp1.r")
debugSource("scripts/statisticAnalysis/gp2a.r")
debugSource("scripts/statisticAnalysis/gp2b.r")
debugSource("scripts/statisticAnalysis/gp3a.r")
debugSource("scripts/statisticAnalysis/gp3b.r")
debugSource("scripts/statisticAnalysis/gp4a.r")
debugSource("scripts/statisticAnalysis/gp4b.r")
debugSource("scripts/statisticAnalysis/gp5.r")
debugSource("scripts/statisticAnalysis/gp6.r")
debugSource("scripts/statisticAnalysis/gp7.r")
# Load file
dataset <- read.csv(file='files/mergedFinal.csv', stringsAsFactors = FALSE)
# For all hypotheses, we need noCommitFixes, let's convert them to numeric
dataset$noCommitFixes = as.numeric(dataset$noCommitFixes)
# Let's separate only the data with all data available
dataset <- dataset[dataset$hasLocComplexityEntropy == "yes", ]
View(dataset)
# For GP1, we need to sum assertions with expected exceptions
dataset$numberOfAssertionsWithRecursion = as.numeric(dataset$numberOfAssertionsWithRecursion)
dataset$numberOfDistinctExpectedExceptions = as.numeric(dataset$numberOfDistinctExpectedExceptions)
dataset$finalNumberOfAssertions = dataset$numberOfAssertionsWithRecursion + dataset$numberOfDistinctExpectedExceptions
# For GP2a, we need the number of distinct method invocations
dataset$numberOfDistinctMethodInvocations = as.numeric(dataset$numberOfDistinctMethodInvocations)
# For GP2b, we need the number of distinct method invocations in the same class
dataset$numberOfDistinctMethodInvocationsInSameClass = as.numeric(dataset$numberOfDistinctMethodInvocationsInSameClass)
# For GP2c, we need the number of distinct test case invocations in the same class
dataset$numberOfDistinctTestCaseMethodInvocationsInSameClass = as.numeric(dataset$numberOfDistinctTestCaseMethodInvocationsInSameClass)
# For GP3a, we need the number of exceptions being thrown in a test case
dataset$numberOfExceptionsThrown = as.numeric(dataset$numberOfExceptionsThrown)
# For GP3b, we need the number of exceptions being expected or caught in a test case
dataset$numberOfExceptionsThrownAndCaughtPartial = as.numeric(dataset$numberOfExceptionsThrownAndCaughtPartial)
dataset$numberOfExceptionsThrownAndCaughtExact = as.numeric(dataset$numberOfExceptionsThrownAndCaughtExact)
dataset$numberOfDistinctExpectedExceptions = as.numeric(dataset$numberOfDistinctExpectedExceptions)
dataset$totalExceptions = dataset$numberOfExceptionsThrownAndCaughtPartial + dataset$numberOfExceptionsThrownAndCaughtExact + dataset$numberOfDistinctExpectedExceptions
dataIneffective <- dataset[dataset$noCommitFixes <=0,]
dataEffective <- dataset[dataset$noCommitFixes >2,]
dataIneffective <- dataset[dataset$noCommitFixes <=0,]
dataEffective <- dataset[dataset$noCommitFixes >=1,]
nrow(dataIneffective)
nrow(dataEffective)
nrow(dataIneffective)-nrow(dataEffective)
# This next dataset involves readability. This is a metric with
# continues values, therefore we can split the data into
# readable vs unreadable by looking at the quartiles
quantile(dataset$readability)
# This yields the following separation
dataUnreadable <- dataset[dataset$readability < -7.373041,]
dataReadable <- dataset[dataset$readability > 2.437962,]
View(dataset)
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
View(results)
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
View(results)
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
View(results)
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
source("C:/Users/dlucr/GitProjects/testCaseAnalyzer/scripts/statisticAnalysis/fullAnalysis.r")
View(results)
View(dataset)
